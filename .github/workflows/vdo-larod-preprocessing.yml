name: Build vdo-larod-preprocessing Applications
on:
  push:
     paths:
      - 'vdo-larod-preprocessing/**'
      - '.github/workflows/vdo-larod-preprocessing.yml'
jobs:
  build:

    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
      #- uses: actions/checkout@master
      # this will enable shellCheck to be performed
      # on every push to the repo.
    #- name: Run ShellCheck
      #uses: ludeeus/action-shellcheck@master
      # If shellCheck complains about unnecessery things, ignore it.
      #env:
        #SHELLCHECK_OPTS: -e SC2153 -e SC2148
    
    # Build VDO larod application to run on CPU
    - name: Build vdo-larod-preprocessing application to run on CPU
      run: |  
        export DOCKER_CONFIG="$WORKSPACE/.docker"
        mkdir -p "$DOCKER_CONFIG"
        echo '{"proxies":{ "default":{"httpProxy": "http://wwwproxy.se.axis.com:3128", "httpsProxy": "http://wwwproxy.se.axis.com:3128"}}}' > "$DOCKER_CONFIG/config.json"
        cd vdo-larod-preprocessing
        cp app/package.conf.cpu app/package.conf
        docker build --tag vdo_larod_preprocessing_cpu:1.0 .
        docker cp $(docker create vdo_larod_preprocessing_cpu:1.0):/opt/app ./build
        cd ..
        pwd
        mkdir -p vdo-larod-preprocessing/build_cpu_preprocessing/
        ls vdo-larod-preprocessing/build/
        cp vdo-larod-preprocessing/build/vdo_larod_preprocessing_cpu_1_0_0_armv7hf.eap vdo-larod-preprocessing/build_cpu_preprocessing/vdo_larod_preprocessing_cpu_1_0_0_armv7hf.eap
        ls vdo-larod-preprocessing/build_cpu_preprocessing/
  
    # Build VDO larod application to run on TPU
    - name: Build vdo-larod-preprocessing application to run on TPU
      run: |     
        export DOCKER_CONFIG="$WORKSPACE/.docker"
        mkdir -p "$DOCKER_CONFIG"
        echo '{"proxies":{ "default":{"httpProxy": "http://wwwproxy.se.axis.com:3128", "httpsProxy": "http://wwwproxy.se.axis.com:3128"}}}' > "$DOCKER_CONFIG/config.json"
        cd vdo-larod-preprocessing
        rm -rf build/
        cp app/package.conf.edgetpu app/package.conf
        docker build --tag vdo_larod_preprocessing_tpu:1.0 .
        docker cp $(docker create vdo_larod_preprocessing_tpu:1.0):/opt/app ./build
        cd ..
        mkdir -p vdo-larod-preprocessing/build_tpu_preprocess/
        cp vdo-larod-preprocessing/build/vdo_larod_preprocessing_edgetpu_1_0_0_armv7hf.eap vdo-larod-preprocessing/build_tpu_preprocess/vdo_larod_preprocessing_edgetpu_1_0_0_armv7hf.eap
        ls vdo-larod-preprocessing/build_tpu_preprocess/
        
    #Run functional tests  
    - name: Run functional tests
      run: |
         export WORKSPACE=$(pwd)
         echo $WORKSPACE
         git clone "https://${{ secrets.GERRIT_USER }}:${{ secrets.GERRIT_PASS }}@gittools.se.axis.com/gerrit/a/tests/atf/tart/recap"
         cd recap  
         git fetch ssh://mirzam@gittools.se.axis.com:29418/tests/atf/tart/recap refs/changes/29/583829/2 && git cherry-pick FETCH_HEAD   
         export ATF_PYTHON=python3     
         ATF_INSTALL=yes source /github-runner/github-runner/init/atf_init.sh
         python --version
         
         chmod +x test_starter.sh
         
        
   
    # Save functional test report as artifact
    - uses: actions/upload-artifact@master
      with:
        name: Test report 
        path: recap/recap/output/report.xml 
